name: build

on: push

env:
  PROJECT: lua-language-server
  BIN: bin

jobs:
  compile:
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-18.04, target: linux }
          - { os: macos-latest, target: macos }
          - { os: windows-latest, target: windows }
    runs-on: ${{ matrix.job.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setting up workflow variables
        id: vars
        shell: bash
        run: |
          # Package version
          if [[ $GITHUB_REF = refs/tags/* ]]; then
            PKG_VERSION=${GITHUB_REF##*/}
          else
            PKG_VERSION=${GITHUB_SHA:0:7}
          fi

          # Package suffix relative to the platform
          if [[ "${{ matrix.job.target }}" = windows ]]; then
            PKG_SUFFIX="zip"
          else
            PKG_SUFFIX="tar.gz"
          fi

          # Package name w/ version
          PKG_BASENAME="${{ env.PROJECT }}-${PKG_VERSION}-${{ matrix.job.target }}"

          # Full name of the tarball asset
          PKG_NAME="${PKG_BASENAME}.${PKG_SUFFIX}"

          # Staging area for tarballs
          PKG_STAGING="ci_staging/$PKG_BASENAME"

          echo ::set-output name=PKG_VERSION::${PKG_VERSION}
          echo ::set-output name=PKG_BASENAME::${PKG_BASENAME}
          echo ::set-output name=PKG_NAME::${PKG_NAME}
          echo ::set-output name=PKG_PATH::"${PKG_STAGING}/${PKG_NAME}"
          echo ::set-output name=PKG_STAGING::${PKG_STAGING}

      - uses: actboy168/setup-luamake@master

      - run: luamake

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.vars.outputs.PKG_BASENAME }}
          path: ${{ env.BIN }}

      - name: Package tarballs
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          STAGING=${{ steps.vars.outputs.PKG_STAGING }}
          NAME=${{ steps.vars.outputs.PKG_NAME }}

          # Making the staging area
          mkdir -p ${STAGING}

          # Copying binary and runtime files to staging area
          cp -r main.lua debugger.lua locale meta script ${{ env.BIN }} ${STAGING}

          # Creating release assets
          pushd "${STAGING}/" >/dev/null
          case "${{ matrix.job.target }}" in
            windows)
              7z -y a ${NAME} * | tail -2
              ;;
            *)
              tar czf ${NAME} *
              ;;
          esac;
          popd >/dev/null

      # Packaging submodules for homebrew distribution
      - name: Package submodules
        id: submodules
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.job.target == 'macos' }}
        run: |
          PKG_SUBMOD_NAME="${{ env.PROJECT }}-${{ steps.vars.outputs.PKG_VERSION }}-submodules.zip"
          PKG_SUBMOD_PATH="${{ steps.vars.outputs.PKG_STAGING }}/$PKG_SUBMOD_NAME"

          zip -r $PKG_SUBMOD_PATH ./ -x "*.git*" -x "*.vscode*" -x "${{ env.BIN }}*" -x "${{ steps.vars.outputs.PKG_STAGING }}*"

          echo ::set-output name=PKG_SUBMOD_NAME::${PKG_SUBMOD_NAME}
          echo ::set-output name=PKG_SUBMOD_PATH::${PKG_SUBMOD_PATH}

      - name: Publish release assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: |
            ${{ steps.vars.outputs.PKG_PATH }}
            ${{ steps.submodules.outputs.PKG_SUBMOD_PATH }}
